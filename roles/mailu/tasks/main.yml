---
- name: Setup basic firewall
  import_tasks: firewall.yml
  when: configure_firewall|bool

- name: read sink
  slurp:
    src: "{{ virtual_corteza_sinkfile_path }}/sink"
  register: sink_slurp
  when: virtual_corteza_sinkfile_path != ""
  ignore_errors: true

- set_fact:
     virtual_corteza_sink: "{{ sink_slurp.content }}"
  when: sink_slurp.failed == false and virtual_corteza_sinkfile_path != ""

- name: Register nginx.conf file
  stat:
    path: "{{ nginx_conf_dir }}/nginx.conf"
  register: nginx_conf_file  

- file:
    state: directory
    path: "{{ item }}"
    recurse: yes
  loop:
    "{{ dir_exists }}"

- name: copy mailu.env file
  template:
    src: mailu.env.j2
    dest: "{{ mailu_volume_folder}}/mailu.env"

- name: copy virtual_alias
  when: virtual_corteza is defined and virtual_corteza|bool == true
  template:
    src: virtual_alias.j2
    dest: "{{ mailu_volume_folder}}/virtual_alias"

# - name: copy virtual_alias
#   when: virtual_corteza is defined and virtual_corteza|bool == true
#   template:
#     src: aliases.j2
#     dest: "{{ mailu_volume_folder}}/aliases"

- name: copy dovecot override  
  template:
    src: dovecot.conf.j2
    dest: "{{ mailu_volume_folder}}/overrides/dovecot/dovecot.conf"

- name: copy postfix override
  when: virtual_corteza is defined and virtual_corteza|bool == true
  template:
    src: postfix.cf.j2
    dest: "{{ mailu_volume_folder}}/overrides/postfix/postfix.cf"

- name: copy transport service override
  when: virtual_corteza is defined and virtual_corteza|bool == true
  template:
    src: postfix.master.j2
    dest: "{{ mailu_volume_folder}}/overrides/postfix/postfix.master"

- name: copy root user curl forward
  when: virtual_corteza is defined and virtual_corteza|bool == true
  template:
    src: forward.j2
    dest: "{{ mailu_volume_folder}}/forward"

# no bind mount on first run
# - name: copy pg_hba.conf
#   template:
#     src: pg_hba.conf.j2
#     dest: "{{ mailu_volume_folder}}/pg_hba.conf"

- name: Deploy Make
  template:
    src: "Makefile.j2"
    dest: "{{ user_path }}/{{ deploy_name }}/Makefile"

- name: Create network
  include_role:
    name: toni.docker
    tasks_from: create_network
  vars:
    ipam_driver_options:
      encrypted: "false"
    docker_networks:
      - { name: "{{ stack_network_name }}", subnet: "{{ stack_subnet }}", driver: "overlay", internal: 'no', gateway: "" }
  when: create_stack_network|default(false)

- name: Deploy vhost
  include_role:
    name: toni.openresty
    tasks_from: vhost
#  vars:  
#    access_group: ""

- name: Copy snippets
  include_role:
    name: toni.openresty
    tasks_from: snippets
  vars:  
    keycloak_access_group: "{{ access_group }}"
    nginx_snippets:
      - { srcname: "auth.conf.j2", destname: "{{ access_group }}_auth.conf" }
    nginx_auth_headers:
      - 'ngx.req.set_header("X-Auth-Audience", res.id_token.aud)'
      - 'ngx.req.set_header("X-Auth-Email", res.id_token.email)'
      - 'ngx.req.set_header("X-Auth-Locale", res.id_token.locale)'
      - 'ngx.req.set_header("X-Auth-Proxy-Secret", "{{ mailu_resty_secret }}")'
      - 'ngx.req.set_header("X-Auth-Proxy-Target", "Admin")'

- name: Configure nginx logs
  when: nginx_conf_file.stat.exists
  include_role:
    name: toni.openresty
    tasks_from: logs

- name: stop nginx stack
  docker_stack:
    state: absent
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml"

- name: restart nginx stack
  docker_stack:
    state: present
    prune: yes
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml"

- name: set cert facts 
  include_role:
    name: toni.certificates
    tasks_from: certbot_facts
  vars:
    certbot_server: "{{ nginx_subdomain }}{{ nginx_domain }}"
    record_dns_create: "{{ dns_create }}"
    record_dns_update: "{{ dns_update }}"

# .conf!!!
- name: Deploy vhost
  when: not existing_certs|bool and certbot_cert_exists|bool
  include_role:
    name: toni.openresty
    tasks_from: vhost

- name: remove {{ deploy_name }} stack
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Deploy compose file
  template:
    src: docker-compose_admin.yml.j2
    dest: "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Deploy {{ deploy_name }}
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Copy files from container
  command: make cp
  args:
    chdir: "{{ user_path }}/{{ deploy_name }}"
  retries: 5
  delay: 20
  register: result
  until: result.rc == 0

- name: remove {{ deploy_name }} stack
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart {{ deploy_name }} stack
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Insert DKIM command
  blockinfile:
    path: "{{ user_path }}/{{ deploy_name }}/manage.py"
    insertbefore: '^\s*@mailu.command()'
    block: |
        @mailu.command()
        @click.argument('domain_name')
        @with_appcontext
        def genkeys(domain_name):
            """ Create domain keys
            """
            domain = models.Domain.query.get(domain_name)
            if domain:
                domain.generate_dkim_key()
                print (domain.dkim_publickey)
            else:
                print ("Domain not found")    
    marker: "# {mark} ANSIBLE MANAGED"

- name: Insert env var template
  lineinfile:
    path: "{{ user_path }}/{{ deploy_name }}/configuration.py"
    insertafter: '^\s*# Advanced settings'
    line: "    'PROXY_SECRET': None,"

- name: Insert env var template
  lineinfile:
    path: "{{ user_path }}/{{ deploy_name }}/configuration.py"
    insertafter: '^\s*# Advanced settings'
    line: "    'PROXY_CREATE': False,"

- name: Insert proxy login
  lineinfile:
    path: "{{ user_path }}/{{ deploy_name }}/base.py"
    insertbefore: BOF
    line: import secrets

- name: Insert proxy login
  blockinfile:
    path: "{{ user_path }}/{{ deploy_name }}/base.py"
    insertbefore: '^\s*@sso.route'
    block: |
        @sso.route('/proxy', methods=['GET'])
        def proxy():
            client_ip = flask.request.headers.get('X-Real-IP', flask.request.remote_addr)
            username=flask.request.headers.get('X-Auth-Email') or ""
            secret=flask.request.headers.get('X-Auth-Proxy-Secret') or ""
            target=flask.request.headers.get('X-Auth-Proxy-Target') or ""
            tokens=username.split("@")
            domain_name=""
            if (len(tokens)==2):
                domain_name=tokens[1]
                localpart=tokens[0]
            domain = models.Domain.query.get(domain_name)
            if not domain or domain=="None":
                return flask.redirect(flask.url_for('.login'))

            form = forms.LoginForm()
            form.submitAdmin.label.text = form.submitAdmin.label.text + ' Admin'
            form.submitWebmail.label.text = form.submitWebmail.label.text + ' Webmail'

            fields = []
            if str(app.config["WEBMAIL"]).upper() != "NONE":
                fields.append(form.submitWebmail)
            if str(app.config["ADMIN"]).upper() != "FALSE":
                fields.append(form.submitAdmin)
            fields = [fields]

            if str(target).upper()=="ADMIN":
                destination = "0; url="+ app.config['WEB_ADMIN']
            else:
                destination = "0; url="+ app.config['WEB_WEBMAIL']

            payload_dict = {
                'Refresh': destination
            }

            device_cookie, device_cookie_username = utils.limiter.parse_device_cookie(flask.request.cookies.get('rate_limit'))
            if username != device_cookie_username and utils.limiter.should_rate_limit_ip(client_ip):
                flask.flash('Too many attempts from your IP (rate-limit)', 'error')
                return flask.render_template('login.html', form=form, fields=fields)
            if utils.limiter.should_rate_limit_user(username, client_ip, device_cookie, device_cookie_username):
                flask.flash('Too many attempts for this user (rate-limit)', 'error')
                return flask.render_template('login.html', form=form, fields=fields)

            if not (app.config['PROXY_SECRET'] in (None, '') or not app.config['PROXY_SECRET']) and app.config['PROXY_SECRET'] == secret and username != "":
                user = models.User.get(flask.request.headers.get('X-Auth-Email'))
                if user:
                    flask.session.regenerate()
                    flask_login.login_user(user)
                    return flask.render_template('login.html', form=form, fields=fields), payload_dict
                else:
                    if app.config['PROXY_CREATE']:
                        if domain.has_email(localpart):
                            flask.flash('Email is already used', 'error')
                            return flask.redirect(flask.url_for('.login'))
                        else:
                            #Create a user
                            user = models.User(
                                localpart=localpart,
                                domain=domain,
                                global_admin=False
                            )
                            user.set_password(secrets.token_urlsafe(32))
                            models.db.session.add(user)
                            models.db.session.commit()
                            user.send_welcome()
                            flask.session.regenerate()
                            flask_login.login_user(user)
                            flask.current_app.logger.info(f'Login succeeded by proxy created user: {username} from {client_ip}.')
                            return flask.render_template('login.html', form=form, fields=fields), payload_dict
                    else:
                        utils.limiter.rate_limit_user(username, client_ip, device_cookie, device_cookie_username) if models.User.get(username) else utils.limiter.rate_limit_ip(client_ip)
                        flask.current_app.logger.warn(f'Login failed by proxy for {username} from {client_ip}.')
                        flask.flash('Wrong e-mail or password', 'error')
            return flask.redirect(flask.url_for('.login'))
    marker: "# {mark} ANSIBLE MANAGED"

- debug: var=ipv6_enabled

- name: Deploy compose file
  template:
    src: docker-compose.yml.j2
    dest: "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart {{ deploy_name }} stack
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart {{ deploy_name }} stack
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Generate DKIM
  when: update_stack is defined and update_stack == false
  command: make genkeys
  args:
    chdir: "{{ user_path }}/{{ deploy_name }}"
  register: dkim_public_key
  retries: 10
  delay: 3
  until: dkim_public_key.rc == 0  

# - name: debug
#   debug:
#     msg: '{{ dkim_public_key }}'

- name: Insert MX record
  when: record_mx_create
  include_role:
    name: toni.dns
    tasks_from: main
  vars:
    dns_provider: "{{ dns_prov }}"
    zone: "{{ nginx_domain }}"
    record_name: "@"
    record_type: "MX"
    record_ttl: 300
    record_value: "10 {{ nginx_subdomain }}{{ nginx_domain }}."
    record_update: "true"
    record_create: "true"

# - name: debug
#   debug:
#     msg: 'record: {{ nginx_domain }}. record_value: "v=spf1 mx a:{{ nginx_subdomain }}{{ nginx_domain }} -all"'

#https://www.spf-record.de/generator
- name: Insert SPF record
  when: record_dkim_dmarc_create
  include_role:
    name: toni.dns
    tasks_from: main
  vars:
    dns_provider: "{{ dns_prov }}"
    zone: "{{ nginx_domain }}"
    record_name: "{{ nginx_domain }}."
    record_type: "TXT"
    record_ttl: 600
    record_value: v=spf1 mx a:{{ nginx_subdomain }}{{ nginx_domain }} -all
    record_update: "true"
    record_create: "true"

- name: Insert DKIM record
  when: 'update_stack is defined and update_stack == false and "Domain not found" not in dkim_public_key.stdout_lines[1] and record_dkim_dmarc_create'
  include_role:
    name: toni.dns
    tasks_from: main
  vars:
    dns_provider: "{{ dns_prov }}"
    zone: "{{ nginx_domain }}"
    record_name: "dkim._domainkey.{{ nginx_domain }}."
    record_type: "TXT"
    record_ttl: 600
    record_value: "v=DKIM1; k=rsa; p={{ dkim_public_key.stdout_lines[1] }}"
    record_update: "true"
    record_create: "true"

- name: Insert DMARC record
  when: record_dkim_dmarc_create
  include_role:
    name: toni.dns
    tasks_from: main
  vars:
    dns_provider: "{{ dns_prov }}"
    zone: "{{ nginx_domain }}"
    record_name: "_dmarc.{{ nginx_domain }}."
    record_type: "TXT"
    record_ttl: 600
    record_value: "v=DMARC1; p=reject; rua=mailto:{{ mailu_admin }}@{{ nginx_subdomain }}{{ nginx_domain }}; ruf=mailto:{{ mailu_admin }}@{{ nginx_subdomain }}{{ nginx_domain }}; adkim=s; aspf=s"
    record_update: "true"
    record_create: "true"

- name: Insert RDNS record
  when: record_rdns_create
  include_role:
    name: toni.dns
    tasks_from: main
  vars:
    api_token: "{{ server_api_token }}"
    hetzner_cloud_api_token: "{{ cloud_api_token }}"
    dns_provider: "{{ rdns_prov }}"
    hetzner_rdns_flavor_cloud: true
    hetzner_ws_user: "{{ rdns_ws_user }}"
    hetzner_ws_pw: "{{ rdns_ws_pw }}"
    hetzner_server_ip: "{{ rdns_server_ip }}"
    hetzner_ptr: "{{ rdns_ptr }}"
    hetzner_server_name: "{{ rdns_server_name }}"

- name: stop nginx stack
  docker_stack:
    state: absent
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml"

- name: restart nginx stack
  docker_stack:
    state: present
    prune: yes
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml"

# It happens that nginx / nginx reverse proxy does not work // Test for it
# todo: investigate 
- name: "Wait until server is accessible"
  uri:
    url: "https://{{ nginx_subdomain }}{{ nginx_domain }}/admin"
    status_code: 200
    validate_certs: no
  register: result
  ignore_errors: yes
  until: result.status == 200
  retries: 8
  delay: 10

- name: Reinit nginx within mailu stack
  command: make initadmin
  args:
    chdir: "{{ user_path }}/{{ deploy_name }}"
  register: mk_curl

- name: "Wait until server is accessible"
  uri:
    url: "https://{{ nginx_subdomain }}{{ nginx_domain }}/admin"
    status_code: 200
    validate_certs: no
  register: result
  ignore_errors: yes
  until: result.status == 200
  retries: 3
  delay: 10  

- name: restart {{ deploy_name }} stack
  when: result.status != 200
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart {{ deploy_name }} stack
  when: result.status != 200
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"  

- name: Sleep for 20 seconds and continue with play
  wait_for:
    timeout: 20
  delegate_to: localhost

# - name: Install curl in postfix container
#   command: make installcurl
#   args:
#     chdir: "{{ user_path }}/{{ deploy_name }}"
#   register: mk_curl

- name: create backup daily backup by cron file under /etc/cron.d
  when: enable_backup | bool==true
  cron:
    name: Create backup
    weekday: "0"
    minute: "0"
    hour: "4"
    user: root
    job: "make -C {{ user_path }}/{{ deploy_name }} hotbackup"

- name: debug
  debug:
    msg: 'Status(200) = {{ result.status }}'